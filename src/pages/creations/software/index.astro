---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import { SOFTWARE } from "@consts";

const data = (await getCollection("software"))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  
type Acc = {
  [year: string]: CollectionEntry<"software">[];
}

const posts = data.reduce((acc: Acc, post) => {
    const year = post.data.date.getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(post);
    return acc;
  }, {});

const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a)); 
---
<PageLayout title={ SOFTWARE.TITLE } description={ SOFTWARE.DESCRIPTION }>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
		  <h3>{ SOFTWARE.TITLE }</h3>
      </div>
      <div class="animate text-black dark:text-white">
		  <p set:html={ SOFTWARE.DESCRIPTION }/>
		  <br />
		  <p>I've writen a lot of software. I've written less about writing software. To see a more comprehensive index of my software bibliography, check out <u><a href="https://github.com/organizedgrime">my GitHub</a></u>.</p>
      </div>
      <div class="space-y-4">
        {years.map(year => (
          <section class="animate space-y-4">
            <div class="font-semibold text-black dark:text-white">
              {year}
            </div>
            <div>
              <ul class="flex flex-col gap-4">
                {
                  posts[year].map((post) => (
                    <li>
                      <ArrowCard entry={post}/>
                    </li>
                  ))
                }
              </ul>
            </div>
          </section>
        ))}
      </div>
    </div>
  </Container>
</PageLayout>
